import os
import requests
from flask import request, jsonify
from dotenv import load_dotenv
import hmac
import hashlib

# Load environment variables
load_dotenv()

# Facebook Messenger configuration
PAGE_ACCESS_TOKEN = os.getenv('PAGE_ACCESS_TOKEN', 'EAAQ757pOgKoBOz3pMRzcU3i21o8QGYZCrU3dAaZCV8S0QST8sBRTzaZCy7DsZAfivTu6VRtzRg6N2uUgwvbgeOatn07zbf84Wd9Sgu8puF67R8J1sUiMNa8ZC4CZCmq6Rb5mxv4QG3k8UVgnQx2u5LycLCMXlYl1ZC0urYPShtpiLM7AfbvZCayTs2KV1D0qK8sDnO4PbgZDZD')
VERIFY_TOKEN = os.getenv('VERIFY_TOKEN', 'sentia_chatbot_verify_2025')
APP_SECRET = os.getenv('8f6acb19298af6b13e479c99d866e7c0')

class FacebookMessenger:
    def __init__(self, search_function, generate_response_function):
        self.search_similar_chunks = search_function
        self.generate_response = generate_response_function
        self.conversation_histories = {}  # L∆∞u l·ªãch s·ª≠ theo user_id
    
    def verify_webhook(self):
        """X√°c th·ª±c webhook v·ªõi Facebook"""
        if request.args.get("hub.mode") == "subscribe" and request.args.get("hub.challenge"):
            # Trong l√∫c verification, kh√¥ng c·∫ßn ki·ªÉm tra signature
            if request.args.get("hub.verify_token") == VERIFY_TOKEN:
                print(f"‚úÖ Webhook verification successful! Token: {VERIFY_TOKEN}")
                return request.args["hub.challenge"]
            else:
                print(f"‚ùå Invalid verification token. Expected: {VERIFY_TOKEN}, Got: {request.args.get('hub.verify_token')}")
                return "Invalid verification token", 403
        return "Hello world", 200
    
    def verify_request_signature(self, payload):
        """X√°c th·ª±c ch·ªØ k√Ω t·ª´ Facebook"""
        if not APP_SECRET:
            return True  # Skip verification n·∫øu kh√¥ng c√≥ APP_SECRET
        
        signature = request.headers.get('X-Hub-Signature-256')
        if not signature:
            return False
        
        expected_signature = 'sha256=' + hmac.new(
            APP_SECRET.encode('utf-8'),
            payload,
            hashlib.sha256
        ).hexdigest()
        
        return hmac.compare_digest(signature, expected_signature)
    
    def handle_webhook(self):
        """X·ª≠ l√Ω webhook t·ª´ Facebook"""
        if not self.verify_request_signature(request.data):
            return "Forbidden", 403
        
        data = request.get_json()
        
        if data.get("object") == "page":
            for entry in data.get("entries", []):
                for messaging_event in entry.get("messaging", []):
                    if messaging_event.get("message"):
                        self.handle_message(messaging_event)
                    elif messaging_event.get("postback"):
                        self.handle_postback(messaging_event)
        
        return "EVENT_RECEIVED", 200
    
    def handle_message(self, messaging_event):
        """X·ª≠ l√Ω tin nh·∫Øn t·ª´ ng∆∞·ªùi d√πng"""
        sender_id = messaging_event["sender"]["id"]
        message_text = messaging_event["message"].get("text", "")
        
        if not message_text:
            return
        
        # T√¨m ki·∫øm th√¥ng tin li√™n quan
        try:
            similar_chunks = self.search_similar_chunks(message_text)
            
            if not similar_chunks:
                response_text = "Xin l·ªói, t√¥i kh√¥ng t√¨m th·∫•y th√¥ng tin li√™n quan trong c∆° s·ªü d·ªØ li·ªáu v·ªÅ c√¢u h·ªèi c·ªßa b·∫°n."
            else:
                # Sinh ph·∫£n h·ªìi
                response_text = self.generate_response(message_text, similar_chunks)
            
            # G·ª≠i ph·∫£n h·ªìi
            self.send_message(sender_id, response_text)
            
        except Exception as e:
            print(f"Error handling message: {e}")
            self.send_message(sender_id, "Xin l·ªói, c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.")
    
    def handle_postback(self, messaging_event):
        """X·ª≠ l√Ω postback (n√∫t b·∫•m)"""
        sender_id = messaging_event["sender"]["id"]
        postback_payload = messaging_event["postback"]["payload"]
        
        if postback_payload == "GET_STARTED":
            welcome_text = """Xin ch√†o! üëã
            
T√¥i l√† chatbot t∆∞ v·∫•n tuy·ªÉn sinh c·ªßa tr∆∞·ªùng Sentia. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:

üéì Th√¥ng tin v·ªÅ c√°c ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o
üìö H·ªçc b·ªïng v√† h·ªó tr·ª£ t√†i ch√≠nh  
üìÖ L·ªãch tuy·ªÉn sinh v√† ƒëƒÉng k√Ω
üìç Th√¥ng tin li√™n h·ªá v√† ƒë·ªãa ch·ªâ
‚ùì C√°c c√¢u h·ªèi kh√°c v·ªÅ tr∆∞·ªùng

H√£y nh·∫Øn tin cho t√¥i b·∫•t k·ª≥ c√¢u h·ªèi n√†o b·∫°n mu·ªën bi·∫øt!"""
            
            self.send_message(sender_id, welcome_text)
    
    def send_message(self, recipient_id, message_text):
        """G·ª≠i tin nh·∫Øn ƒë·∫øn ng∆∞·ªùi d√πng"""
        # Chia nh·ªè tin nh·∫Øn n·∫øu qu√° d√†i (Facebook gi·ªõi h·∫°n 2000 k√Ω t·ª±)
        max_length = 2000
        if len(message_text) > max_length:
            messages = [message_text[i:i+max_length] for i in range(0, len(message_text), max_length)]
            for msg in messages:
                self._send_single_message(recipient_id, msg)
        else:
            self._send_single_message(recipient_id, message_text)
    
    def _send_single_message(self, recipient_id, message_text):
        """G·ª≠i m·ªôt tin nh·∫Øn ƒë∆°n"""
        url = f"https://graph.facebook.com/v18.0/me/messages"
        
        headers = {
            "Content-Type": "application/json"
        }
        
        params = {
            "access_token": PAGE_ACCESS_TOKEN
        }
        
        data = {
            "recipient": {"id": recipient_id},
            "message": {"text": message_text},
            "messaging_type": "RESPONSE"
        }
        
        response = requests.post(url, headers=headers, params=params, json=data)
        
        if response.status_code != 200:
            print(f"Error sending message: {response.text}")
    
    def set_get_started_button(self):
        """Thi·∫øt l·∫≠p n√∫t Get Started"""
        url = f"https://graph.facebook.com/v18.0/me/messenger_profile"
        
        headers = {
            "Content-Type": "application/json"
        }
        
        params = {
            "access_token": PAGE_ACCESS_TOKEN
        }
        
        data = {
            "get_started": {"payload": "GET_STARTED"},
            "greeting": [
                {
                    "locale": "default",
                    "text": "Xin ch√†o! T√¥i l√† chatbot t∆∞ v·∫•n tuy·ªÉn sinh c·ªßa tr∆∞·ªùng Sentia. H√£y nh·∫•n 'B·∫Øt ƒë·∫ßu' ƒë·ªÉ b·∫Øt ƒë·∫ßu cu·ªôc tr√≤ chuy·ªán!"
                }
            ]
        }
        
        response = requests.post(url, headers=headers, params=params, json=data)
        return response.status_code == 200 